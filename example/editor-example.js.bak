import PyretCMB from '../src/languages/pyret';
import StyleSelector from '../src/languages/pyret/style-selection/style-selector';
import './example-page.less';
import dsExampleCode from './bootstrap-ds.arr';
import { testing }  from "codemirror-blocks";


/// DEBUGGING STUFF
import { wait, teardown } from '../spec/support/test-utils';
import {
  click,
  keyDown,
  _keyPress,
  _insertText,
} from '../spec/support/simulate';

const DELAY = 250;

const smallExampleCode = `

WIDTH = 640
HEIGHT = 480
EXPLOSION-COLOR = "gray"
var _TITLE-COLOR = "white"
var _BACKGROUND = rectangle(WIDTH, HEIGHT, "solid", "black")

fun spacing(): random(200) end
_target-increment_ = 20
_danger-increment_ = -50
LOSS-SCORE = 0
GAMEOVER_IMG = image-url("http://www.wescheme.org/images/teachpacks2012/gameover.png")

var _score_= 0
var _player-x_ = 0
var _player-y_ = 0

var _line-length_ = lam(a, b): 0 end
var _distance_ = lam(px, cx, py, cy): 0 end
var _distances-color_ = ""

TOLERANCE = 20

ask: 
| x == 4 then: 4
| x == 5 then: 5
| x == 6 then: 6
end

RESTING-TOP-DOWN-ORIENTATION = 40

temp0 = w / ((w / h) * 3)
temp2 = image-height(an-image)
temp0 = w / ((w / h) * image-height(an-height))



fun fit-image-to(w, h, an-image):
  height-scaled = ((w / h) * image-height(an-image))
  ask:
    | image-width(an-image) == height-scaled then:
      scale(image-width(an-image) / w, an-image)
    | image-width(an-image) > height-scaled then:
      foo = w / ((w / h) * image-height(an-image))
      bar = crop(0, 0, (w / h) * image-height(an-image), image-height(an-image), an-image)
      scale(foo, bar)
    | image-width(an-image) < height-scaled then:
      foo = w / image-width(an-image)
      bar = crop(0, 0, image-width(an-image), (h / w) * image-width(an-image), an-image)
      scale(foo, bar)
  end
end

fun cull(beings :: List<Being>) -> List<Being>:
  for filter(b from beings):
    p = b.posn
    (p.x > 0) and (p.x < WIDTH) and
    (p.y > 0) and (p.y < HEIGHT)
  end
end

fun posn-to-point(p :: Posn) -> Posn:
posn(p.x, HEIGHT - p.y)
end


fun world-with-dangers(w, d):
  world(d, w.shots, w.targets, w.player, w.bg, w.score, w.title, w.timer)
end
fun world-with-shots(w, s):
  world(w.dangers, s, w.targets, w.player, w.bg, w.score, w.title, w.timer)
end
fun world-with-targets(w, t):
  world(w.dangers, w.shots, t, w.player, w.bg, w.score, w.title, w.timer)
end
fun world-with-player(w, p):
  world(w.dangers, w.shots, w.targets, p, w.bg, w.score, w.title, w.timer)
end
fun world-with-score(w, s):
  world(w.dangers, w.shots, w.targets, w.player, w.bg, s, w.title, w.timer)
end
fun world-with-timer(w, t):
  world(w.dangers, w.shots, w.targets, w.player, w.bg, w.score, w.title, t)
end

`;

const useBigCode = false;
const exampleCode = useBigCode? dsExampleCode : smallExampleCode;

// grab the DOM Node to host the editor, and use it to instantiate
const container = document.getElementById('cmb-editor');
const editor = PyretCMB(container, {value: exampleCode, collapseAll: false});
editor.setBlockMode(true);

// Constructs the Style Selector below the Code Monitor
const selectorBox = document.getElementById('style-selector');
const selector = new StyleSelector(selectorBox);
selector.display();

// for debugging purposes
window.editor = editor
document.getElementById('testButton').onclick = runTestEvent;

async function runTestEvent(){
	let ast = editor.getAst();
    this.literal1 = ast.rootNodes[0];
    console.log('first root is', this.literal1);
	console.log('before anything, activeElement is', document.activeElement);
	testing.click(this.literal1);
    await wait(DELAY);
    console.log('after clicking, activeElement is', document.activeElement)
    testing.keyDown("ArrowDown");
    await wait(DELAY);
    console.log('after ArrowDown, activeElement is', document.activeElement)
}

export let selectedStyle = "default";
